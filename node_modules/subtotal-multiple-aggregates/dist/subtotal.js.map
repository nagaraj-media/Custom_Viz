{"version":3,"file":"subtotal.js","sources":["subtotal.coffee"],"names":[],"mappings":"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","sourcesContent":["flatten = require('array-flatten')\n\ncallWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        module.exports = pivotModule\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    LOOKER_ROW_TOTAL_KEY = '$$$_row_total_$$$'\n\n    class SubtotalPivotDataMulti extends $.pivotUtilities.PivotData\n        constructor: (input, opts) ->\n            super input, opts\n\n            @hasColTotals = opts.hasColTotals ? true\n            @hasRowTotals = if @colAttrs.length then (opts.hasRowTotals ? true) else true\n            @labels = opts.labels ? {}\n\n            # Multiple aggregator hack: Let clients pass in aggregators\n            # (plural) and use the first one as the main value for each cell.\n            @aggregatorNames = opts.aggregatorNames ? ['Count']\n            @aggregators = opts.aggregators ? ($.pivotUtilities.aggregators[name]({}) for name in @aggregatorNames)\n            @aggregatorName = @aggregatorNames[0]\n            @aggregator = @aggregators[0]\n            if @aggregatorNames.length != @aggregators.length\n                throw new Error('aggregators and aggregatorNames must be the same length')\n\n            @allTotal = {}\n            for name, i in @aggregatorNames\n                @allTotal[name] = @aggregators[i](this, [], [])\n\n            SubtotalPivotDataMulti.forEachRecord @input, @derivedAttributes, (record) =>\n                @processRecord(record) if @filter(record)\n\n            @hasLookerRowTotals = flatten(@getColKeys()).includes(LOOKER_ROW_TOTAL_KEY)\n            @useLookerRowTotals = (opts.useLookerRowTotals ? true) and @hasLookerRowTotals\n\n        processKey = (record, totals, keys, attrs, getAggregator) ->\n            key = []\n            addKey = false\n            for attr in attrs\n                key.push record[attr] ? \"null\"\n                flatKey = key.join String.fromCharCode(0)\n                if not totals[flatKey]\n                    totals[flatKey] = getAggregator key.slice()\n                    addKey = true\n                totals[flatKey].push record\n            keys.push key if addKey\n            return key\n\n        processRecord: (record) -> #this code is called in a tight loop\n\n            # Since this gets called in the PivotData (superclass) constructor\n            # but we haven't yet initialized @aggregators, don't do anything.\n            if not @aggregators then return\n\n            rowKey = []\n            addKey = false\n            for attr in @rowAttrs\n                rowKey.push record[attr] ? \"null\"\n                flatKey = rowKey.join String.fromCharCode(0)\n                if not @rowTotals[flatKey]\n                    @rowTotals[flatKey] = {}\n                    for name, i in @aggregatorNames\n                        aggregator = @aggregators[i]\n                        @rowTotals[flatKey][name] = aggregator this, rowKey.slice(), []\n                        addKey = true\n                # Don't aggregate alread-aggregated data.\n                continue if @colAttrs.length && record[@colAttrs[0]] is LOOKER_ROW_TOTAL_KEY\n                for name in @aggregatorNames\n                    @rowTotals[flatKey][name].push record\n            @rowKeys.push rowKey if addKey\n\n            colKey = []\n            addKey = false\n            for attr in @colAttrs\n                colKey.push record[attr] ? \"null\"\n                flatKey = colKey.join String.fromCharCode(0)\n                if not @colTotals[flatKey]\n                    @colTotals[flatKey] = {}\n                    for name, i in @aggregatorNames\n                        aggregator = @aggregators[i]\n                        @colTotals[flatKey][name] = aggregator this, [], colKey.slice()\n                        addKey = true\n                for name in @aggregatorNames\n                    @colTotals[flatKey][name].push record\n            @colKeys.push colKey if addKey\n\n            if colKey[0] isnt LOOKER_ROW_TOTAL_KEY\n                for name in @aggregatorNames\n                    @allTotal[name].push record\n\n            m = rowKey.length-1\n            n = colKey.length-1\n            return if m < 0 or n < 0\n            for i in [0..m]\n                fRowKey = rowKey.slice(0, i+1)\n                flatRowKey = fRowKey.join String.fromCharCode(0)\n                @tree[flatRowKey] ?= {}\n                for j in [0..n]\n                    fColKey = colKey.slice 0, j+1\n                    flatColKey = fColKey.join String.fromCharCode(0)\n                    @tree[flatRowKey][flatColKey] ?= {}\n                    for name, k in @aggregatorNames\n                        aggregator = @aggregators[k]\n                        @tree[flatRowKey][flatColKey][name] = aggregator this, fRowKey, fColKey if not @tree[flatRowKey][flatColKey][name]\n                        @tree[flatRowKey][flatColKey][name].push record\n\n            return\n\n    $.pivotUtilities.SubtotalPivotDataMulti = SubtotalPivotDataMulti\n\n    SubtotalRenderer = (pivotData, opts) ->\n        defaults =\n            table: clickCallback: null\n            localeStrings: totals: \"Totals\", subtotalOf: \"Subtotal of\"\n            arrowCollapsed: \"\\u25B6\"\n            arrowExpanded: \"\\u25E2\"\n            rowSubtotalDisplay:\n                displayOnTop: true\n                disableFrom: 99999\n                collapseAt: 99999\n                hideOnExpand: false\n                disableExpandCollapse: false\n            colSubtotalDisplay:\n                displayOnTop: true\n                disableFrom: 0\n                collapseAt: 0\n                hideOnExpand: false\n                disableExpandCollapse: false\n        opts = $.extend true, {}, defaults, opts\n\n        opts.rowSubtotalDisplay.disableFrom = 0 if opts.rowSubtotalDisplay.disableSubtotal\n        opts.rowSubtotalDisplay.disableFrom = opts.rowSubtotalDisplay.disableAfter+1 if typeof  opts.rowSubtotalDisplay.disableAfter isnt 'undefined' and opts.rowSubtotalDisplay.disableAfter isnt null\n        opts.rowSubtotalDisplay.collapseAt = opts.collapseRowsAt if typeof opts.rowSubtotalDisplay.collapseAt isnt 'undefined' and opts.collapseRowsAt isnt null\n\n        opts.colSubtotalDisplay.disableFrom = 0 if opts.colSubtotalDisplay.disableSubtotal\n        opts.colSubtotalDisplay.disableFrom = opts.colSubtotalDisplay.disableAfter+1 if typeof  opts.colSubtotalDisplay.disableAfter isnt 'undefined' and opts.colSubtotalDisplay.disableAfter isnt null\n        opts.colSubtotalDisplay.collapseAt = opts.collapseColsAt if typeof opts.colSubtotalDisplay.collapseAt isnt 'undefined' and opts.collapseColsAt isnt null\n\n        if opts.colSubtotalDisplay.disableFrom > 0\n            throw new Error('Column subtotals are unimplemented')\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n        tree = pivotData.tree\n        rowTotals = pivotData.rowTotals\n        colTotals = pivotData.colTotals\n        allTotal = pivotData.allTotal\n\n        aggregators = pivotData.aggregators\n        aggregatorNames = pivotData.aggregatorNames\n\n        hasColTotals = pivotData.hasColTotals\n        hasRowTotals = pivotData.hasRowTotals\n        labels = pivotData.labels\n\n        hasLookerRowTotals = pivotData.hasLookerRowTotals\n        useLookerRowTotals = pivotData.useLookerRowTotals\n\n        classRowHide = \"rowhide\"\n        classRowShow = \"rowshow\"\n        classColHide = \"colhide\"\n        classColShow = \"colshow\"\n        clickStatusExpanded = \"expanded\"\n        clickStatusCollapsed = \"collapsed\"\n        classExpanded = \"expanded\"\n        classCollapsed = \"collapsed\"\n        classRowExpanded = \"rowexpanded\"\n        classRowCollapsed = \"rowcollapsed\"\n        classColExpanded = \"colexpanded\"\n        classColCollapsed = \"colcollapsed\"\n        arrowExpanded = opts.arrowExpanded\n        arrowCollapsed = opts.arrowCollapsed\n\n        # Based on http://stackoverflow.com/questions/195951/change-an-elements-class-with-javascript -- Begin\n        hasClass = (element, className) ->\n            regExp = new RegExp \"(?:^|\\\\s)\" + className + \"(?!\\\\S)\", \"g\"\n            element.className.match(regExp) isnt null\n\n        removeClass = (element, className) ->\n            for name in className.split \" \"\n                regExp = new RegExp \"(?:^|\\\\s)\" + name + \"(?!\\\\S)\", \"g\"\n                element.className = element.className.replace regExp, ''\n\n        addClass = (element, className) ->\n            for name in className.split \" \"\n                element.className += (\" \" + name) if not hasClass element, name\n\n        replaceClass = (element, replaceClassName, byClassName) ->\n            removeClass element, replaceClassName\n            addClass element, byClassName\n        # Based on http://stackoverflow.com/questions/195951/change-an-elements-class-with-javascript -- End\n\n        escapeHtml = (unsafe) ->\n            unsafe\n                .replace(/&/g, \"&amp;\")\n                .replace(/</g, \"&lt;\")\n                .replace(/>/g, \"&gt;\")\n                .replace(/\"/g, \"&quot;\")\n                .replace(/'/g, \"&#039;\")\n\n        parseLabel = (parts) ->\n            # Safe way to insert stylized labels. Parts can be a string or object { label, subabel }, or array as such.\n            out = ''\n            append = (value) ->\n                if Array.isArray(value)\n                    append(x) for x in value\n                else if value?.label\n                    out += escapeHtml value.label\n                    if value.sublabel\n                        out += \" <em>#{escapeHtml value.sublabel}</em>\"\n                else if value != null and value != undefined\n                    out += escapeHtml String(value)\n            append parts\n            return out\n\n        createElement = (elementType, className, label, attributes, eventHandlers) ->\n            e = document.createElement elementType\n            e.className = className if className?\n            e.innerHTML = parseLabel label\n            e.setAttribute attr, val for own attr, val of attributes if attributes?\n            e.addEventListener event, handler for own event, handler of eventHandlers if eventHandlers?\n            return e\n\n        setAttributes = (e, attrs) ->\n            e.setAttribute a, v for own a, v of attrs\n\n        processKeys = (keysArr, className, opts) ->\n            lastIdx = keysArr[0].length-1\n            headers = children: []\n            row = 0\n            keysArr.reduce(\n                (val0, k0) =>\n                    col = 0\n                    k0.reduce(\n                        (acc, curVal, curIdx, arr) =>\n                            if not acc[curVal]\n                                key = k0.slice 0, col+1\n                                acc[curVal] =\n                                    row: row\n                                    col: col\n                                    descendants: 0\n                                    children: []\n                                    text: curVal\n                                    key: key\n                                    flatKey: key.join String.fromCharCode(0)\n                                    firstLeaf: null\n                                    leaves: 0\n                                    parent: if col isnt 0 then acc else null\n                                    th: createElement \"th\", className, curVal\n                                    childrenSpan: 0\n                                acc.children.push curVal\n                            if col > 0\n                                acc.descendants++\n                            col++\n                            if curIdx == lastIdx\n                                node = headers\n                                for i in [0..lastIdx-1] when lastIdx > 0\n                                    node[k0[i]].leaves++\n                                    if not node[k0[i]].firstLeaf\n                                        node[k0[i]].firstLeaf = acc[curVal]\n                                    node = node[k0[i]]\n                                return headers\n                            return acc[curVal]\n                        headers)\n                    row++\n                    return headers\n                headers)\n            return headers\n\n        buildAxisHeader = (axisHeaders, col, attrs, opts) ->\n            ah =\n                text: labels[attrs[col]] ? attrs[col]\n                expandedCount: 0\n                expandables: 0\n                attrHeaders: []\n                clickStatus: clickStatusExpanded\n                onClick: collapseAxis\n\n            arrow = \"#{arrowExpanded} \"\n            hClass = classExpanded\n            if col >= opts.collapseAt\n                arrow = \"#{arrowCollapsed} \"\n                hClass = classCollapsed\n                ah.clickStatus = clickStatusCollapsed\n                ah.onClick = expandAxis\n            if col == attrs.length-1 or col >= opts.disableFrom or opts.disableExpandCollapse\n                arrow = \"\"\n            ah.th = createElement \"th\", \"pvtAxisLabel #{hClass}\", [arrow, ah.text]\n            if col < attrs.length-1 and col < opts.disableFrom and not opts.disableExpandCollapse\n                ah.th.onclick = (event) ->\n                    event = event || window.event\n                    ah.onClick axisHeaders, col, attrs, opts\n            axisHeaders.ah.push ah\n            return ah\n\n        buildColAxisHeaders = (thead, rowAttrs, colAttrs, opts) ->\n            axisHeaders =\n                collapseAttrHeader: collapseCol\n                expandAttrHeader: expandCol\n                ah: []\n            for attr, col in colAttrs\n                ah = buildAxisHeader axisHeaders, col, colAttrs, opts.colSubtotalDisplay\n                ah.th.colSpan = rowAttrs.length\n                ah.tr = createElement \"tr\", \"pvtColAxisHeaders\"\n                ah.tr.appendChild ah.th\n                thead.appendChild ah.tr\n            return axisHeaders\n\n        buildRowAxisHeaders = (thead, rowAttrs, colAttrs, opts) ->\n            axisHeaders =\n                collapseAttrHeader: collapseRow\n                expandAttrHeader: expandRow\n                ah: []\n                tr: createElement \"tr\", \"pvtRowAxisHeaders\"\n            for col in [0..rowAttrs.length-1]\n                ah = buildAxisHeader axisHeaders, col, rowAttrs, opts.rowSubtotalDisplay\n                axisHeaders.tr.appendChild ah.th\n            thead.appendChild axisHeaders.tr\n            return axisHeaders\n\n        getHeaderText = (h, attrs, opts) ->\n            arrow = \" #{arrowExpanded} \"\n            arrow = \"\" if h.col == attrs.length-1 or h.col >= opts.disableFrom or opts.disableExpandCollapse or h.children.length is 0\n            label = if h.text is LOOKER_ROW_TOTAL_KEY then 'Total' else h.text\n            return \"#{arrow}#{label}\"\n\n        buildColHeader = (axisHeaders, attrHeaders, h, rowAttrs, colAttrs, node, opts) ->\n            # DF Recurse\n            buildColHeader axisHeaders, attrHeaders, h[chKey], rowAttrs, colAttrs, node, opts for chKey in h.children\n            # Process\n            ah = axisHeaders.ah[h.col]\n            ah.attrHeaders.push h\n\n            h.node = node.counter\n            h.onClick = collapseCol\n\n            addClass h.th, \"#{classColShow} col#{h.row} colcol#{h.col} #{classColExpanded}\"\n            h.th.setAttribute \"data-colnode\", h.node\n            h.th.colSpan = if h.children.length then h.childrenSpan else aggregatorNames.length\n            #h.th.rowSpan = 2 if h.children.length is 0 and rowAttrs.length isnt 0\n            h.th.innerHTML = getHeaderText h, colAttrs, opts.colSubtotalDisplay\n            if h.children.length isnt 0 and h.col < opts.colSubtotalDisplay.disableFrom\n                    ah.expandables++\n                    ah.expandedCount += 1\n                    h.th.colSpan++ if not opts.colSubtotalDisplay.hideOnExpand\n                    if not opts.colSubtotalDisplay.disableExpandCollapse\n                        h.th.onclick = (event) ->\n                            event = event || window.event\n                            h.onClick axisHeaders, h, opts.colSubtotalDisplay\n                    h.sTh = createElement \"th\", \"pvtColLabelFiller #{classColShow} col#{h.row} colcol#{h.col} #{classColExpanded}\"\n                    h.sTh.setAttribute \"data-colnode\", h.node\n                    # h.sTh.rowSpan = colAttrs.length-h.col\n                    replaceClass h.sTh, classColShow, classColHide if opts.colSubtotalDisplay.hideOnExpand\n                    h[h.children[0]].tr.appendChild h.sTh\n\n            h.parent?.childrenSpan += h.th.colSpan\n\n            h.clickStatus = clickStatusExpanded\n\n            if h.text is LOOKER_ROW_TOTAL_KEY\n                if not h.children.length\n                    #h.th.rowSpan = colAttrs.length\n                    addClass h.th, \"pvtColTotal\"\n                    ah.tr.appendChild h.th\n                    h.tr = ah.tr\n                else\n                    ah.tr.appendChild createElement \"th\", null, null, { colspan: aggregatorNames.length }\n            else\n                ah.tr.appendChild h.th\n                h.tr = ah.tr\n\n            attrHeaders.push h\n            node.counter++\n\n        buildRowTotalsHeader = (tr, colKeyHeaders, rowAttrs, colAttrs) ->\n            if colAttrs.length > 0\n                # We have pivots.\n                if colKeyHeaders\n\n                    addHeaders = (headers) ->\n                        if headers.children.length > 0\n                            for child in headers.children\n                                continue if child is LOOKER_ROW_TOTAL_KEY\n                                addHeaders(headers[child])\n                        else\n                            for name in aggregatorNames\n                                th = createElement \"th\", \"rowTotal\", labels[name]\n                                tr.appendChild th\n                    addHeaders(colKeyHeaders)\n\n                    if useLookerRowTotals\n                        for child in colKeyHeaders.children\n                            continue if child is LOOKER_ROW_TOTAL_KEY\n                            for name in aggregatorNames\n                                th = createElement \"th\", \"rowTotal\", labels[name]\n                                tr.appendChild th\n\n                    if hasRowTotals and not useLookerRowTotals\n                        for name in aggregatorNames\n                            th = createElement \"th\", \"rowTotal\", labels[name]\n                            tr.appendChild th\n                else\n                    th = createElement \"th\", \"pvtColLabel pvtColTotal\", 'Total*',\n                        colspan: aggregatorNames.length\n                    tr.appendChild th\n            else\n                # No pivots, but we still need to add column headers.\n                for name in aggregatorNames\n                    th = createElement \"th\", \"rowTotal\", labels[name]\n                    tr.appendChild th\n            return\n\n        lastPivotHeader = null\n\n        buildRowHeader = (tbody, axisHeaders, attrHeaders, h, rowAttrs, colAttrs, node, opts) ->\n            # DF Recurse\n            buildRowHeader tbody, axisHeaders, attrHeaders, h[chKey], rowAttrs, colAttrs, node, opts for chKey in h.children\n            # Process\n            ah = axisHeaders.ah[h.col]\n            ah.attrHeaders.push h\n\n            h.node = node.counter\n            h.onClick = collapseRow\n            firstChild = h[h.children[0]] if h.children.length isnt 0\n\n            removeClass lastPivotHeader, \"lastPivot\" if lastPivotHeader\n            lastPivotHeader = h.th\n            addClass h.th, \"#{classRowShow} pvtRowHeader lastPivot row#{h.row} rowcol#{h.col} #{classRowExpanded}\"\n            h.th.setAttribute \"data-rownode\", h.node\n            # h.th.colSpan = 2 if h.col is rowAttrs.length-1 and colAttrs.length isnt 0\n            h.th.rowSpan = h.childrenSpan if h.children.length isnt 0\n            h.th.innerHTML = getHeaderText h, rowAttrs, opts.rowSubtotalDisplay\n\n            h.tr = createElement \"tr\", \"row#{h.row}\"\n            h.tr.appendChild h.th\n            if h.children.length is 0\n                tbody.appendChild h.tr\n            else\n                tbody.insertBefore h.tr, firstChild.tr\n\n            if h.children.length isnt 0 and h.col < opts.rowSubtotalDisplay.disableFrom\n                ++ah.expandedCount\n                ++ah.expandables\n                if not opts.rowSubtotalDisplay.disableExpandCollapse\n                    h.th.onclick = (event) ->\n                        event = event || window.event\n                        h.onClick axisHeaders, h, opts.rowSubtotalDisplay\n\n                for i in [0...rowAttrs.length-h.col-1]\n                    h.sTh = createElement \"th\", \"pvtRowLabelFiller row#{h.row} rowcol#{h.col} #{classRowExpanded} #{classRowShow}\"\n                    replaceClass h.sTh, classRowShow, classRowHide if opts.rowSubtotalDisplay.hideOnExpand\n                    h.sTh.setAttribute \"data-rownode\", h.node\n                    #h.sTh.colSpan = rowAttrs.length-h.col-1\n\n                    if opts.rowSubtotalDisplay.displayOnTop\n                        h.tr.appendChild h.sTh\n                    else\n                        h.th.rowSpan += 1 # if not opts.rowSubtotalDisplay.hideOnExpand\n                        h.sTr = createElement \"tr\", \"row#{h.row}\"\n                        h.sTr.appendChild h.sTh\n                        tbody.appendChild h.sTr\n\n            h.th.rowSpan++ if h.children.length isnt 0\n            h.parent?.childrenSpan += h.th.rowSpan\n\n            h.clickStatus = clickStatusExpanded\n            attrHeaders.push h\n            node.counter++\n\n        getTableEventHandlers = (value, rowKey, colKey, rowAttrs, colAttrs, opts) ->\n            return if not opts.table?.eventHandlers\n            eventHandlers = {}\n            for own event, handler of opts.table.eventHandlers\n                filters = {}\n                filters[attr] = colKey[i] for own i, attr of colAttrs when colKey[i]?\n                filters[attr] = rowKey[i] for own i, attr of rowAttrs when rowKey[i]?\n                eventHandlers[event] = (e) -> handler(e, value, filters, pivotData)\n            return eventHandlers\n\n        buildValues = (tbody, colAttrHeaders, rowAttrHeaders, rowAttrs, colAttrs, opts) ->\n            for rh in rowAttrHeaders when rh.col is rowAttrs.length-1 or (rh.children.length isnt 0 and rh.col < opts.rowSubtotalDisplay.disableFrom)\n                rCls = \"pvtVal row#{rh.row} rowcol#{rh.col} #{classRowExpanded}\"\n                if rh.children.length > 0\n                    rCls += \" pvtRowSubtotal\"\n                    rCls += if opts.rowSubtotalDisplay.hideOnExpand then \" #{classRowHide}\" else \"  #{classRowShow}\"\n                else\n                    rCls += \" #{classRowShow}\"\n                tr = if rh.sTr then rh.sTr else rh.tr\n                for ch in colAttrHeaders when ch.col is colAttrs.length-1 or (ch.children.length isnt 0 and ch.col < opts.colSubtotalDisplay.disableFrom)\n                    for name in aggregatorNames\n                        aggregator = tree[rh.flatKey][ch.flatKey][name] ? {value: (-> null), format: -> \"\"}\n                        val = aggregator.value()\n                        cls = \" #{rCls} col#{ch.row} colcol#{ch.col} #{classColExpanded}\"\n                        if ch.children.length > 0\n                            cls += \" pvtColSubtotal\"\n                            cls += if opts.colSubtotalDisplay.hideOnExpand then \" #{classColHide}\" else \" #{classColShow}\"\n                        else\n                            cls += \" #{classColShow}\"\n                        td = createElement \"td\", cls, aggregator.format(val),\n                            \"data-value\": val\n                            \"data-rownode\": rh.node\n                            \"data-colnode\": ch.node,\n                            getTableEventHandlers val, rh.key, ch.key, rowAttrs, colAttrs, opts\n                        tr.appendChild td\n\n                # buildRowTotal\n                if hasRowTotals and not useLookerRowTotals\n                    for name in aggregatorNames\n                        totalAggregator = rowTotals[rh.flatKey][name]\n                        val = totalAggregator.value()\n                        td = createElement \"td\", \"pvtTotal rowTotal #{rCls}\", totalAggregator.format(val),\n                            \"data-value\": val\n                            \"data-row\": \"row#{rh.row}\"\n                            \"data-rowcol\": \"col#{rh.col}\"\n                            \"data-rownode\": rh.node,\n                        getTableEventHandlers val, rh.key, [], rowAttrs, colAttrs, opts\n                        tr.appendChild td\n            return\n\n        buildColTotalsHeader = (rowAttrs, colAttrs) ->\n            tr = createElement \"tr\", \"pvtRowTotal\"\n            colspan = rowAttrs.length\n            th = createElement \"th\", \"pvtTotalLabel colTotal\", opts.localeStrings.totals, {colspan: colspan}\n            tr.appendChild th\n            return tr\n\n        buildColTotals = (tr, attrHeaders, rowAttrs, colAttrs, opts) ->\n            for h in attrHeaders when  h.col is colAttrs.length-1 or (h.children.length isnt 0 and h.col < opts.colSubtotalDisplay.disableFrom)\n                clsNames = \"pvtVal pvtTotal colTotal #{classColExpanded} col#{h.row} colcol#{h.col}\"\n                if h.children.length isnt 0\n                    clsNames += \" pvtColSubtotal\"\n                    clsNames += if opts.colSubtotalDisplay.hideOnExpand then \" #{classColHide}\" else \" #{classColShow}\"\n                else\n                    clsNames += \" #{classColShow}\"\n\n                for name, i in aggregatorNames\n                    totalAggregator = colTotals[h.flatKey][aggregatorNames[i]]\n                    val = totalAggregator.value()\n                    td = createElement \"td\", clsNames, totalAggregator.format(val),\n                        \"data-value\": val\n                        \"data-for\": \"col#{h.col}\"\n                        \"data-colnode\": \"#{h.node}\",\n                        getTableEventHandlers val, [], h.key, rowAttrs, colAttrs, opts\n                    tr.appendChild td\n            return\n\n        buildGrandTotal = (tbody, tr, rowAttrs, colAttrs, opts) ->\n            for name in aggregatorNames\n                totalAggregator = allTotal[name]\n                val = totalAggregator.value()\n                td = createElement \"td\", \"pvtGrandTotal\", totalAggregator.format(val),\n                    {\"data-value\": val},\n                    getTableEventHandlers val, [], [], rowAttrs, colAttrs, opts\n                tr.appendChild td\n\n        collapseAxisHeaders = (axisHeaders, col, opts) ->\n            collapsible = Math.min axisHeaders.ah.length-2, opts.disableFrom-1\n            return if col > collapsible\n            for i in [col..collapsible]\n                ah = axisHeaders.ah[i]\n                replaceClass ah.th, classExpanded, classCollapsed\n                ah.th.innerHTML = parseLabel([\" #{arrowCollapsed} \", ah.text])\n                ah.clickStatus = clickStatusCollapsed\n                ah.onClick = expandAxis\n\n        adjustAxisHeader = (axisHeaders, col, opts) ->\n            ah = axisHeaders.ah[col]\n            if ah.expandedCount is 0\n                collapseAxisHeaders axisHeaders, col, opts\n            else if ah.expandedCount is ah.expandables\n                replaceClass ah.th, classCollapsed, classExpanded\n                ah.th.innerHTML = parseLabel([\" #{arrowExpanded} \", ah.text])\n                ah.clickStatus = clickStatusExpanded\n                ah.onClick = collapseAxis\n\n        hideChildCol = (ch) ->\n            $(ch.th).closest 'table.pvtTable'\n                .find \"tbody tr td[data-colnode=\\\"#{ch.node}\\\"], th[data-colnode=\\\"#{ch.node}\\\"]\"\n                .removeClass classColShow\n                .addClass classColHide\n\n        collapseHiddenColSubtotal = (h, opts) ->\n            $(h.th).closest 'table.pvtTable'\n                .find \"tbody tr td[data-colnode=\\\"#{h.node}\\\"], th[data-colnode=\\\"#{h.node}\\\"]\"\n                .removeClass classColExpanded\n                .addClass classColCollapsed\n            h.th.innerHTML = \" #{arrowCollapsed} #{h.text}\" if h.children.length isnt 0\n            h.th.colSpan = 1\n\n        collapseShowColSubtotal = (h, opts) ->\n            $(h.th).closest 'table.pvtTable'\n                .find \"tbody tr td[data-colnode=\\\"#{h.node}\\\"], th[data-colnode=\\\"#{h.node}\\\"]\"\n                .removeClass classColExpanded\n                .addClass classColCollapsed\n                .removeClass classColHide\n                .addClass classColShow\n            h.th.innerHTML = \" #{arrowCollapsed} #{h.text}\" if h.children.length isnt 0\n            h.th.colSpan = 1\n\n        collapseChildCol = (ch, h) ->\n            collapseChildCol ch[chKey], h for chKey in ch.children when hasClass ch[chKey].th, classColShow\n            hideChildCol ch\n\n        collapseCol = (axisHeaders, h, opts) ->\n            colSpan = h.th.colSpan - 1\n            collapseChildCol h[chKey], h for chKey in h.children when hasClass h[chKey].th, classColShow\n            if h.col < opts.disableFrom\n                if hasClass h.th, classColHide\n                    collapseHiddenColSubtotal h, opts\n                else\n                    collapseShowColSubtotal h, opts\n            p = h.parent\n            while p\n                p.th.colSpan -= colSpan\n                p = p.parent\n            h.clickStatus = clickStatusCollapsed\n            h.onClick = expandCol\n            axisHeaders.ah[h.col].expandedCount--\n            adjustAxisHeader axisHeaders, h.col, opts\n\n        showChildCol = (ch) ->\n            $(ch.th).closest 'table.pvtTable'\n                .find \"tbody tr td[data-colnode=\\\"#{ch.node}\\\"], th[data-colnode=\\\"#{ch.node}\\\"]\"\n                .removeClass classColHide\n                .addClass classColShow\n\n        expandHideColSubtotal = (h) ->\n            $(h.th).closest 'table.pvtTable'\n                .find \"tbody tr td[data-colnode=\\\"#{h.node}\\\"], th[data-colnode=\\\"#{h.node}\\\"]\"\n                .removeClass \"#{classColCollapsed} #{classColShow}\"\n                .addClass \"#{classColExpanded} #{classColHide}\"\n            replaceClass h.th, classColHide, classColShow\n            h.th.innerHTML = \" #{arrowExpanded} #{h.text}\"\n\n        expandShowColSubtotal = (h) ->\n            $(h.th).closest 'table.pvtTable'\n                .find \"tbody tr td[data-colnode=\\\"#{h.node}\\\"], th[data-colnode=\\\"#{h.node}\\\"]\"\n                .removeClass \"#{classColCollapsed} #{classColHide}\"\n                .addClass \"#{classColExpanded} #{classColShow}\"\n            h.th.colSpan++\n            h.th.innerHTML = \" #{arrowExpanded} #{h.text}\"\n\n        expandChildCol = (ch, opts) ->\n            if ch.children.length isnt 0 and opts.hideOnExpand and ch.clickStatus is clickStatusExpanded\n                replaceClass ch.th, classColHide, classColShow\n            else\n                showChildCol ch\n            if ch.sTh and ch.clickStatus is clickStatusExpanded and opts.hideOnExpand\n                replaceClass ch.sTh, classColShow, classColHide\n            expandChildCol ch[chKey], opts for chKey in ch.children if (ch.clickStatus is clickStatusExpanded or ch.col >= opts.disableFrom)\n\n        expandCol = (axisHeaders, h, opts) ->\n            if h.clickStatus is clickStatusExpanded\n                adjustAxisHeader axisHeaders, h.col, opts\n                return\n            colSpan = 0\n            for chKey in h.children\n                ch = h[chKey]\n                expandChildCol ch, opts\n                colSpan += ch.th.colSpan\n            h.th.colSpan = colSpan\n\n            if h.col < opts.disableFrom\n                if opts.hideOnExpand\n                    expandHideColSubtotal h\n                    --colSpan\n                else\n                    expandShowColSubtotal h\n            p = h.parent\n            while p\n                p.th.colSpan += colSpan\n                p = p.parent\n            h.clickStatus = clickStatusExpanded\n            h.onClick = collapseCol\n            axisHeaders.ah[h.col].expandedCount++\n            adjustAxisHeader axisHeaders, h.col, opts\n\n        hideChildRow = (ch, opts) ->\n            replaceClass cell, classRowShow, classRowHide for cell in ch.tr.querySelectorAll \"th, td\"\n            replaceClass cell, classRowShow, classRowHide for cell in ch.sTr.querySelectorAll \"th, td\" if ch.sTr\n\n        collapseShowRowSubtotal = (h, opts) ->\n            h.th.innerHTML = \" #{arrowCollapsed} #{h.text}\"\n            for cell in h.tr.querySelectorAll \"th, td\"\n                removeClass cell, \"#{classRowExpanded} #{classRowHide}\"\n                addClass cell, \"#{classRowCollapsed} #{classRowShow}\"\n            if h.sTr\n                for cell in h.sTr.querySelectorAll \"th, td\"\n                    removeClass cell, \"#{classRowExpanded} #{classRowHide}\"\n                    addClass cell, \"#{classRowCollapsed} #{classRowShow}\"\n\n        collapseChildRow = (ch, h, opts) ->\n            collapseChildRow ch[chKey], h, opts for chKey in ch.children\n            hideChildRow ch, opts\n\n        collapseRow = (axisHeaders, h, opts) ->\n            collapseChildRow h[chKey], h, opts for chKey in h.children\n            collapseShowRowSubtotal h, opts\n            h.clickStatus = clickStatusCollapsed\n            h.onClick = expandRow\n            axisHeaders.ah[h.col].expandedCount--\n            adjustAxisHeader axisHeaders, h.col, opts\n\n        showChildRow = (ch, opts) ->\n            replaceClass cell, classRowHide, classRowShow for cell in ch.tr.querySelectorAll \"th, td\"\n            replaceClass cell, classRowHide, classRowShow for cell in ch.sTr.querySelectorAll \"th, td\" if ch.sTr\n\n        expandShowRowSubtotal = (h, opts) ->\n            h.th.innerHTML = \" #{arrowExpanded} #{h.text}\"\n            for cell in h.tr.querySelectorAll \"th, td\"\n                removeClass cell, \"#{classRowCollapsed} #{classRowHide}\"\n                addClass cell, \"#{classRowExpanded} #{classRowShow}\"\n            if h.sTr\n                for cell in h.sTr.querySelectorAll \"th, td\"\n                    removeClass cell, \"#{classRowCollapsed} #{classRowHide}\"\n                    addClass cell, \"#{classRowExpanded} #{classRowShow}\"\n\n        expandHideRowSubtotal = (h, opts) ->\n            h.th.innerHTML = \" #{arrowExpanded} #{h.text}\"\n            for cell in h.tr.querySelectorAll \"th, td\"\n                removeClass cell, \"#{classRowCollapsed} #{classRowShow}\"\n                addClass cell, \"#{classRowExpanded} #{classRowHide}\"\n            removeClass h.th, \"#{classRowCollapsed} #{classRowHide}\"\n            addClass cell, \"#{classRowExpanded} #{classRowShow}\"\n            if h.sTr\n                for cell in h.sTr.querySelectorAll \"th, td\"\n                    removeClass cell, \"#{classRowCollapsed} #{classRowShow}\"\n                    addClass cell, \"#{classRowExpanded} #{classRowHide}\"\n\n        expandChildRow = (ch, opts) ->\n            if ch.children.length isnt 0 and opts.hideOnExpand and ch.clickStatus is clickStatusExpanded\n                replaceClass ch.th, classRowHide, classRowShow\n            else\n                showChildRow ch, opts\n            if ch.sTh and ch.clickStatus is clickStatusExpanded and opts.hideOnExpand\n                replaceClass ch.sTh, classRowShow, classRowHide\n            expandChildRow ch[chKey], opts for chKey in ch.children if (ch.clickStatus is clickStatusExpanded or ch.col >= opts.disableFrom)\n\n        expandRow = (axisHeaders, h, opts) ->\n            if h.clickStatus is clickStatusExpanded\n                adjustAxisHeader axisHeaders, h.col, opts\n                return\n            for chKey in h.children\n                ch = h[chKey]\n                expandChildRow ch, opts\n            if h.children.length isnt 0\n                if opts.hideOnExpand\n                    expandHideRowSubtotal h, opts\n                else\n                    expandShowRowSubtotal h, opts\n            h.clickStatus = clickStatusExpanded\n            h.onClick = collapseRow\n            axisHeaders.ah[h.col].expandedCount++\n            adjustAxisHeader axisHeaders, h.col, opts\n\n        collapseAxis = (axisHeaders, col, attrs, opts) ->\n            collapsible = Math.min attrs.length-2, opts.disableFrom-1\n            return if col > collapsible\n            axisHeaders.collapseAttrHeader axisHeaders, h, opts for h in axisHeaders.ah[i].attrHeaders when h.clickStatus is clickStatusExpanded and h.children.length isnt 0 for i in [collapsible..col] by -1\n\n        expandAxis = (axisHeaders, col, attrs, opts) ->\n            ah = axisHeaders.ah[col]\n            axisHeaders.expandAttrHeader axisHeaders, h, opts for h in axisHeaders.ah[i].attrHeaders for i in [0..col]\n            # when h.clickStatus is clickStatusCollapsed and h.children.length isnt 0 for i in [0..col]\n\n        main = (rowAttrs, rowKeys, colAttrs, colKeys) ->\n            rowAttrHeaders = []\n            colAttrHeaders = []\n\n            colKeyHeaders = processKeys colKeys, \"pvtColLabel\" if colAttrs.length isnt 0 and colKeys.length isnt 0\n            rowKeyHeaders = processKeys rowKeys, \"pvtRowLabel\" if rowAttrs.length isnt 0 and rowKeys.length isnt 0\n\n            if colKeyHeaders and not useLookerRowTotals\n                delete colKeyHeaders[LOOKER_ROW_TOTAL_KEY]\n                colKeyHeaders.children = colKeyHeaders.children.filter((k) -> k != LOOKER_ROW_TOTAL_KEY)\n\n            tableClasses = \"pvtTable\"\n            tableClasses += \" pvtHasRowTotals\" if hasRowTotals\n            tableClasses += \" pvtHasColTotals\" if hasColTotals\n            result = createElement \"table\", tableClasses, null, {style: \"display: none;\"}\n\n            thead = createElement \"thead\"\n            result.appendChild thead\n\n            if colAttrs.length isnt 0\n                colAxisHeaders = buildColAxisHeaders thead, rowAttrs, colAttrs, opts\n                node = counter: 0\n                buildColHeader colAxisHeaders, colAttrHeaders, colKeyHeaders[chKey], rowAttrs, colAttrs, node, opts for chKey in colKeyHeaders.children\n                if hasRowTotals and not useLookerRowTotals\n                    for ah, index in colAxisHeaders.ah\n                        if index == colAxisHeaders.ah.length - 1\n                            buildRowTotalsHeader ah.tr, null, rowAttrs, colAttrs\n                        else\n                            ah.tr.appendChild createElement \"th\", \"pvtColTotalFiller\", null, { colspan: colAttrs.length }\n\n            tbody = createElement \"tbody\"\n            result.appendChild tbody\n            if rowAttrs.length isnt 0\n                rowAxisHeaders = buildRowAxisHeaders thead, rowAttrs, colAttrs, opts\n                buildRowTotalsHeader rowAxisHeaders.tr, colKeyHeaders, rowAttrs, colAttrs\n                node = counter: 0\n                buildRowHeader tbody, rowAxisHeaders, rowAttrHeaders, rowKeyHeaders[chKey], rowAttrs, colAttrs, node, opts for chKey in rowKeyHeaders.children\n\n            buildValues tbody, colAttrHeaders, rowAttrHeaders, rowAttrs, colAttrs, opts\n\n            if hasColTotals\n                tr = buildColTotalsHeader rowAttrs, colAttrs\n                buildColTotals tr, colAttrHeaders, rowAttrs, colAttrs, opts if colAttrs.length > 0\n                if hasRowTotals and not useLookerRowTotals\n                    buildGrandTotal tbody, tr, rowAttrs, colAttrs, opts\n                tbody.appendChild tr\n\n            collapseAxis colAxisHeaders, opts.colSubtotalDisplay.collapseAt, colAttrs, opts.colSubtotalDisplay\n            collapseAxis rowAxisHeaders, opts.rowSubtotalDisplay.collapseAt, rowAttrs, opts.rowSubtotalDisplay\n\n            result.setAttribute \"data-numrows\", rowKeys.length\n            result.setAttribute \"data-numcols\", colKeys.length\n            result.style.display = \"\"\n\n            return result\n\n        return main rowAttrs, rowKeys, colAttrs, colKeys\n\n    $.pivotUtilities.subtotal_renderers =\n        \"Table With Subtotal\":  (pvtData, opts) -> SubtotalRenderer pvtData, opts\n        \"Table With Subtotal Bar Chart\":   (pvtData, opts) -> $(SubtotalRenderer pvtData, opts).barchart()\n        \"Table With Subtotal Heatmap\":   (pvtData, opts) -> $(SubtotalRenderer pvtData, opts).heatmap \"heatmap\", opts\n        \"Table With Subtotal Row Heatmap\":   (pvtData, opts) -> $(SubtotalRenderer pvtData, opts).heatmap \"rowheatmap\", opts\n        \"Table With Subtotal Col Heatmap\":  (pvtData, opts) -> $(SubtotalRenderer pvtData, opts).heatmap \"colheatmap\", opts\n\n    #\n    # Aggregators\n    #\n    usFmtPct = $.pivotUtilities.numberFormat digitsAfterDecimal:1, scaler: 100, suffix: \"%\"\n    aggregatorTemplates = $.pivotUtilities.aggregatorTemplates\n\n    subtotalAggregatorTemplates =\n        fractionOf: (wrapped, type=\"row\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            rowKey = [] if typeof rowKey is \"undefined\"\n            colKey = [] if typeof colKey is \"undefined\"\n            selector: {row: [rowKey.slice(0, -1),[]], col: [[], colKey.slice(0, -1)]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    $.pivotUtilities.subtotalAggregatorTemplates = subtotalAggregatorTemplates\n\n    $.pivotUtilities.subtotal_aggregators = do (tpl = aggregatorTemplates, sTpl = subtotalAggregatorTemplates) ->\n        \"Sum As Fraction Of Parent Row\":        sTpl.fractionOf(tpl.sum(), \"row\", usFmtPct)\n        \"Sum As Fraction Of Parent Column\":     sTpl.fractionOf(tpl.sum(), \"col\", usFmtPct)\n        \"Count As Fraction Of Parent Row\":      sTpl.fractionOf(tpl.count(), \"row\", usFmtPct)\n        \"Count As Fraction Of Parent Column\":   sTpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n\n"]}